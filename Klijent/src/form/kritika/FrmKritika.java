/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.kritika;

import controller.Controller;
import domain.Delo;
import domain.Korisnik;
import domain.Kritika;
import domain.status.StatusKritike;
import form.FrmMode;
import java.awt.Color;
import javax.jws.soap.SOAPBinding;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import session.Session;
import usecase.UseCase;

/**
 *
 * @author Phenom
 */
public class FrmKritika extends javax.swing.JDialog {

    /**
     * Creates new form FrmKritika
     */
    public FrmKritika(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        adjustForm();
        listenToChangesInText();
    }

    public FrmKritika(Object object, boolean b, FrmMode frmMode) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblKorisnik = new javax.swing.JLabel();
        btnSendKritika = new javax.swing.JButton();
        btnZatvori = new javax.swing.JButton();
        lblOdobri = new javax.swing.JLabel();
        btnDa = new javax.swing.JButton();
        btnNe = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtKritika = new javax.swing.JTextArea();
        lblLimit = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblKorisnik.setText("Korisnik:");

        btnSendKritika.setText("Pošalji kritiku");
        btnSendKritika.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendKritikaActionPerformed(evt);
            }
        });

        btnZatvori.setText("Zatvori prozor");
        btnZatvori.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZatvoriActionPerformed(evt);
            }
        });

        lblOdobri.setText("Odobri kritiku?");

        btnDa.setText("Da");
        btnDa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDaActionPerformed(evt);
            }
        });

        btnNe.setText("Ne");
        btnNe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNeActionPerformed(evt);
            }
        });

        txtKritika.setColumns(20);
        txtKritika.setRows(5);
        jScrollPane2.setViewportView(txtKritika);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblOdobri)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnDa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSendKritika))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnZatvori, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnNe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblKorisnik)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 34, Short.MAX_VALUE)
                        .addComponent(lblLimit)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblKorisnik)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(lblLimit)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSendKritika)
                    .addComponent(btnZatvori))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOdobri)
                    .addComponent(btnDa)
                    .addComponent(btnNe))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnZatvoriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZatvoriActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnZatvoriActionPerformed

    private void btnSendKritikaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendKritikaActionPerformed
        try {
            Delo delo = (Delo) Session.getInstance().getUseCaseParams().get("delo");
            Korisnik korisnik = Session.getInstance().getKorisnik();
            String sadrzaj = txtKritika.getText();
            if (sadrzaj.length() > 1000) {
                throw new Exception("Prekoracili ste dozvoljen broj karaktera");
            }
            
            Kritika kritika = new Kritika(1, delo, sadrzaj, StatusKritike.NA_CEKANJU, korisnik);
            Controller.getInstance().posaljiKritikuNaOdobrenje(kritika);
            
            JOptionPane.showMessageDialog(this, "Uspešno poslata kritika", "Success", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da pošalje komentar! ", "Greska pri slanju komentara!", JOptionPane.ERROR_MESSAGE);
            System.err.println(ex.getMessage());
        }
        
        
                
    }//GEN-LAST:event_btnSendKritikaActionPerformed

    private void btnDaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDaActionPerformed
        int response = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da hoćete da odobrite ovu kritiku?", "Odobravanje kritike", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            try {
                // odobri komentar
                Controller.getInstance().odobriKritiku((Kritika) Session.getInstance().getUseCaseParams().get("kritika"));
                this.dispose();

                JOptionPane.showMessageDialog(this, "Odobrena kritika!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da odobri kritiku! ", "Greska pri slanju kritike!", JOptionPane.ERROR_MESSAGE);
                System.err.println(ex.getMessage());
            }
        } else if (response == JOptionPane.NO_OPTION || response == JOptionPane.CLOSED_OPTION) {
            
        }
    }//GEN-LAST:event_btnDaActionPerformed

    private void btnNeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNeActionPerformed
        int response = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da hoćete da odbijete ovu kritiku?", "Odbijanje kritike", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (response == JOptionPane.YES_OPTION) {
            try {
                // odbij komentar
                Controller.getInstance().deleteKritika((Kritika) Session.getInstance().getUseCaseParams().get("kritika"));
                this.dispose();

                JOptionPane.showMessageDialog(this, "Odbijena kritika! Kritika je takođe izbrisana iz sistema.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da izbriše kritiku! ", "Greska pri slanju kritike!", JOptionPane.ERROR_MESSAGE);
                System.err.println(ex.getMessage());
            }
        } else if (response == JOptionPane.NO_OPTION || response == JOptionPane.CLOSED_OPTION) {
            // samo zatvori prozor tj. ne radi nista
        }
    }//GEN-LAST:event_btnNeActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDa;
    private javax.swing.JButton btnNe;
    private javax.swing.JButton btnSendKritika;
    private javax.swing.JButton btnZatvori;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblKorisnik;
    private javax.swing.JLabel lblLimit;
    private javax.swing.JLabel lblOdobri;
    private javax.swing.JTextArea txtKritika;
    // End of variables declaration//GEN-END:variables

    private void listenToChangesInText() {
        // Listen for changes in the text
        txtKritika.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                update();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                update();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                update();
            }
            
            public void update() {
                lblLimit.setText(txtKritika.getText().length()+"/1000");
                if (txtKritika.getText().length() > 1000)
                    lblLimit.setForeground(Color.red);
                else
                    lblLimit.setForeground(new Color(187, 187, 187));
            }
        });
    }

    private void adjustForm() {
        setLocationRelativeTo(null);
        Kritika kritika = new Kritika();
        
        switch(Session.getInstance().getCurrentUseCase()){
            case UseCase.UC_NEW_KRITIKA:
                
                lblKorisnik.setText("Korisnik: " + Session.getInstance().getKorisnik());
                txtKritika.setText("");
                txtKritika.setEnabled(true);
                
                btnSendKritika.setVisible(true);
                btnZatvori.setVisible(true);
                btnZatvori.setText("Cancel");
                
                btnDa.setVisible(false);
                btnNe.setVisible(false);
                lblOdobri.setVisible(false);
                
                setTitle("Unos kritike");
                break;
                
            case UseCase.UC_VIEW_KRITIKA:
                
                kritika = (Kritika) Session.getInstance().getUseCaseParams().get("kritika");
                
                lblKorisnik.setText("Korisnik: " + Session.getInstance().getKorisnik());
                txtKritika.setText(kritika.getSadrzaj());
                txtKritika.setEnabled(false);
                
                btnSendKritika.setVisible(false);
                btnZatvori.setVisible(true);
                btnZatvori.setText("Zatvori prozor");
                
                btnDa.setVisible(false);
                btnNe.setVisible(false);
                lblOdobri.setVisible(false);
                
                setTitle("Pregled kritike");
                break;
            
            case UseCase.UC_APPROVE_KRITIKA:
                
                kritika = (Kritika) Session.getInstance().getUseCaseParams().get("kritika");
                
                lblKorisnik.setText("Korisnik: " + Session.getInstance().getKorisnik());
                txtKritika.setText(kritika.getSadrzaj());
                txtKritika.setEnabled(false);
                
                btnSendKritika.setVisible(false);
                btnZatvori.setVisible(false);
                btnZatvori.setText("Zatvori prozor");
                
                btnDa.setVisible(true);
                btnNe.setVisible(true);
                lblOdobri.setVisible(true);
                
                setTitle("Odobravanje kritike");
                break;
        }
    }
}
