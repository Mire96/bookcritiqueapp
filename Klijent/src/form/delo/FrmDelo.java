/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.delo;

import controller.Controller;
import domain.Autor;
import domain.Delo;
import domain.Korisnik;
import domain.role.UlogaKorisnika;
import form.kritika.FrmKritika;
import form.FrmMode;
import form.autor.FrmPregledAutora;
import form.delo.model.TableModelAutor;
import form.delo.model.TableModelDelo;
import form.kritika.FrmPregledKritika;
import java.awt.Color;
import java.awt.HeadlessException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import session.Session;
import usecase.UseCase;

/**
 *
 * @author Phenom
 */
public class FrmDelo extends javax.swing.JDialog {

    /**
     * Creates new form FrmDelo
     */
    public FrmDelo(java.awt.Frame parent, boolean modal, FrmMode mode) {
        super(parent, modal);
        initComponents();
        centerDialog();
        
        adjustForm(mode);
        listenToChangesInText();
             
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblKorisnik = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNaslov = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOpis = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        txtGodina = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtJezik = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblIzabraniAutori = new javax.swing.JTable();
        btnDodajAutora = new javax.swing.JButton();
        btnObrisiAutora = new javax.swing.JButton();
        btnOstaviKritiku = new javax.swing.JButton();
        btnPogledajKritike = new javax.swing.JButton();
        btnSacuvaj = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblLimit = new javax.swing.JLabel();
        btnIzmeni = new javax.swing.JButton();
        btnAzuriraj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setText("Naslov:");

        txtNaslov.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNaslovActionPerformed(evt);
            }
        });

        jLabel1.setText("Opis: ");

        txtOpis.setColumns(20);
        txtOpis.setRows(5);
        jScrollPane1.setViewportView(txtOpis);

        jLabel3.setText("Godina:");

        txtGodina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGodinaActionPerformed(evt);
            }
        });

        jLabel6.setText("Jezik");

        jLabel4.setText("Autor");

        tblIzabraniAutori.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblIzabraniAutori);

        btnDodajAutora.setText("Dodaj autora");
        btnDodajAutora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajAutoraActionPerformed(evt);
            }
        });

        btnObrisiAutora.setText("Obriši");
        btnObrisiAutora.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiAutoraActionPerformed(evt);
            }
        });

        btnOstaviKritiku.setText("Ostavi kritiku");
        btnOstaviKritiku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOstaviKritikuActionPerformed(evt);
            }
        });

        btnPogledajKritike.setText("Pogledaj kritike");
        btnPogledajKritike.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPogledajKritikeActionPerformed(evt);
            }
        });

        btnSacuvaj.setText("Sačuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obriši");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        jLabel5.setText("Trenutni korisnik:");

        btnIzmeni.setText("Izmeni delo");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        btnAzuriraj.setText("Sacuvaj promene");
        btnAzuriraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAzurirajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnDodajAutora)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnObrisiAutora, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnOstaviKritiku, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPogledajKritike, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSacuvaj, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(btnObrisi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAzuriraj)
                        .addGap(18, 18, 18)
                        .addComponent(btnIzmeni)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblKorisnik, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblLimit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(25, 25, 25)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(txtJezik, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtGodina, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel4)
                                        .addGap(470, 470, 470))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 684, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtNaslov, javax.swing.GroupLayout.PREFERRED_SIZE, 684, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(lblKorisnik, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNaslov, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblLimit, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(txtGodina, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtJezik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnObrisiAutora, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDodajAutora, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOstaviKritiku, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPogledajKritike, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSacuvaj)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnObrisi)
                    .addComponent(btnIzmeni)
                    .addComponent(btnAzuriraj))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNaslovActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNaslovActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNaslovActionPerformed

    private void txtGodinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGodinaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGodinaActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnDodajAutoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajAutoraActionPerformed
        JDialog frmPregled = new FrmPregledAutora(null, true);
        frmPregled.setVisible(true);
        
        Autor a = Session.getInstance().getAutor();
        if(a != null){
            TableModelAutor tma = (TableModelAutor) tblIzabraniAutori.getModel();
            if(!tma.getLista().contains(a))
                tma.addAutor(a);
            else{
                JOptionPane.showMessageDialog(this, "Taj autor je vec izabran za dato delo!", "Biranje autora", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnDodajAutoraActionPerformed

    private void btnObrisiAutoraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiAutoraActionPerformed
        try {
            int row = tblIzabraniAutori.getSelectedRow();
            if (row == -1) {
                JOptionPane.showMessageDialog(this, "Morate odabrati autora!");
            } else {
                TableModelAutor tma = (TableModelAutor) tblIzabraniAutori.getModel();
                if (Session.getInstance().getCurrentUseCase() == UseCase.UC_EDIT_DELO) {
                    Autor autor = tma.get(row);
                    Controller.getInstance().deleteAutor(autor);
                }
                tma.obrisiAutora(row);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmDelo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(FrmDelo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnObrisiAutoraActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        try {
            sacuvajDelo(1);
            JOptionPane.showMessageDialog(this, "Uspesno sacuvano delo", "Uspesno cuvanje!", JOptionPane.INFORMATION_MESSAGE);
            dispose();
            JDialog frmPregledDela = new FrmDelo(null, true, FrmMode.VIEW);
            frmPregledDela.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da sačuva delo", "Greska pri cuvanju dela!", JOptionPane.ERROR_MESSAGE);
            System.err.println(ex.getMessage());
        }
        
        
    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnOstaviKritikuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOstaviKritikuActionPerformed
        Session.getInstance().setCurrentUseCase(UseCase.UC_NEW_KRITIKA);
        JDialog frmKritike = new FrmKritika(null, true);
        frmKritike.setVisible(true);
    }//GEN-LAST:event_btnOstaviKritikuActionPerformed

    private void btnPogledajKritikeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPogledajKritikeActionPerformed
        Session.getInstance().setCurrentUseCase(UseCase.UC_VIEW_KRITIKA);
        JDialog frmKritike = new FrmPregledKritika(null, true, FrmMode.VIEW);
        frmKritike.setVisible(true);
    }//GEN-LAST:event_btnPogledajKritikeActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        int deloID = ((Delo) Session.getInstance().getUseCaseParams().get("delo")).getDeloID();
        Session.getInstance().setCurrentUseCase(UseCase.UC_DELETE_DELO);
        try {
            Controller.getInstance().deleteDelo(deloID);

            JOptionPane.showMessageDialog(this, "Uspešno obrisano delo!", "Brisanje dela", JOptionPane.INFORMATION_MESSAGE);
            dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da obriše delo", "Error", JOptionPane.ERROR_MESSAGE);
            System.err.println(ex.getMessage());
        }
    }//GEN-LAST:event_btnObrisiActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
        this.dispose();
        JDialog frmDelo = new FrmDelo(null, true, FrmMode.EDIT);
        frmDelo.setVisible(true);
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnAzurirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAzurirajActionPerformed
        try {
            int key = ((Delo) Session.getInstance().getUseCaseParams().get("delo")).getDeloID();
            izmeniDelo(key);
            JOptionPane.showMessageDialog(this, "Uspesno izmenjeno delo", "Izmena dela", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
            FrmDelo frmDelo = new FrmDelo(null, true, FrmMode.VIEW);
            frmDelo.setVisible(true);
           
        } catch (Exception ex) {
            Logger.getLogger(FrmDelo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAzurirajActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmDelo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmDelo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmDelo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmDelo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

       
    }

    private void centerDialog() {
        setLocationRelativeTo(null);
    }

    private void adjustForm(FrmMode mode) {
        fillCurrentUser();
        fixTable();
        
        switch (mode){
           
           case NEW:
               Session.getInstance().setCurrentUseCase(UseCase.UC_NEW_DELO);
               txtNaslov.setEnabled(true);
               txtOpis.setEnabled(true);
               
               txtGodina.setEnabled(true);
               txtJezik.setEnabled(true);
               
               tblIzabraniAutori.setEnabled(true);
               btnDodajAutora.setEnabled(true);
               btnObrisiAutora.setEnabled(true);
               
               btnOstaviKritiku.setVisible(false);
               btnPogledajKritike.setVisible(false);
               btnSacuvaj.setVisible(true);
               
               btnAzuriraj.setVisible(false);
               btnIzmeni.setVisible(false);
               btnObrisi.setVisible(false);
               btnCancel.setVisible(false);
               
               setTitle("Unos dela");
               break;
            
           case EDIT:
               Session.getInstance().setCurrentUseCase(UseCase.UC_EDIT_DELO);
               txtNaslov.setEnabled(true);
               txtOpis.setEnabled(true);
               
               txtGodina.setEnabled(true);
               txtJezik.setEnabled(true);
               
               tblIzabraniAutori.setEnabled(true);
               btnDodajAutora.setEnabled(true);
               btnObrisiAutora.setEnabled(true);
               
               btnOstaviKritiku.setVisible(false);
               btnPogledajKritike.setVisible(false);
               btnSacuvaj.setVisible(false);
               
               btnAzuriraj.setVisible(true);
               btnIzmeni.setVisible(false);
               btnObrisi.setVisible(true);
               btnCancel.setVisible(true);
               
               setTitle("Unos dela");
               setDelo();
               break;
               
            case VIEW:
               Session.getInstance().setCurrentUseCase(UseCase.UC_VIEW_DELO);
               txtNaslov.setEnabled(false);
               txtOpis.setEnabled(false);
               
               txtGodina.setEnabled(false);
               txtJezik.setEnabled(false);
               
               tblIzabraniAutori.setEnabled(false);
               btnDodajAutora.setEnabled(false);
               btnObrisiAutora.setEnabled(false);
               
               btnOstaviKritiku.setVisible(true);
               btnPogledajKritike.setVisible(true);
               btnSacuvaj.setVisible(false);
               
                if (Session.getInstance().getKorisnik().getAdminRole() == UlogaKorisnika.ADMIN) {
                    btnAzuriraj.setVisible(false);
                    btnIzmeni.setVisible(true);
                    btnObrisi.setVisible(true);
                    btnCancel.setVisible(false);
                }else{
                    btnAzuriraj.setVisible(false);
                    btnIzmeni.setVisible(false);
                    btnObrisi.setVisible(false);
                    btnCancel.setVisible(false);
                }
                
                setTitle("Pregled dela");
                setDelo();
                break;
               
        }
    }
    
    private void fixTable(List<Autor> lista) {
       TableModelAutor tma = new TableModelAutor(lista);
       tblIzabraniAutori.setModel(tma);
    }
    
    private void fixTable() {
       TableModelAutor tma = new TableModelAutor();
       tblIzabraniAutori.setModel(tma);
    }
    
     private void setDelo() {
         //Mozda proveriti ovde da li delo postoji u hashmapi
         Delo delo = (Delo) Session.getInstance().getUseCaseParams().get("delo");
         
         try {
             viewDelo(delo);
         } catch (Exception ex) {
             JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
         }
     }

    private void fillCurrentUser() {
        
        lblKorisnik.setText(Session.getInstance().getKorisnik().toString());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAzuriraj;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDodajAutora;
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnObrisiAutora;
    private javax.swing.JButton btnOstaviKritiku;
    private javax.swing.JButton btnPogledajKritike;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblKorisnik;
    private javax.swing.JLabel lblLimit;
    private javax.swing.JTable tblIzabraniAutori;
    private javax.swing.JTextField txtGodina;
    private javax.swing.JTextField txtJezik;
    private javax.swing.JTextField txtNaslov;
    private javax.swing.JTextArea txtOpis;
    // End of variables declaration//GEN-END:variables

    private void viewDelo(Delo delo) {
        try {
            txtNaslov.setText(delo.getNaslov());
            txtOpis.setText(delo.getOpis());
            
            txtGodina.setText(delo.getGodina() + "");
            txtJezik.setText(delo.getJezik());
            
            List<Autor> autori = Controller.getInstance().pronadjiAutore(delo);
            fixTable(autori);
        } catch (Exception ex) {
            Logger.getLogger(FrmDelo.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void listenToChangesInText() {
        txtOpis.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                update();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                update();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                update();
            }
            
            public void update() {
                lblLimit.setText(txtOpis.getText().length()+"/2000");
                if (txtOpis.getText().length() > 2000)
                    lblLimit.setForeground(Color.red);
                else
                    lblLimit.setForeground(new Color(187, 187, 187));
            }
        });
    }

    private void sacuvajDelo(int key) throws Exception {
        Delo delo = napraviDelo(key);
        
        if(delo == null)
            throw new Exception("Nisu bila popunjena sva polja za delo");
        
        TableModelAutor tma = (TableModelAutor) tblIzabraniAutori.getModel();
        List<Autor> autori = tma.getLista();
        
        if (txtOpis.getText().length() > 2000) {
            throw new Exception("Prekoračili ste dozvoljen broj karaktera za opis!");
        }
        
        Controller.getInstance().sacuvajDelo(delo, autori);
        
        Session.getInstance().setCurrentUseCase(UseCase.UC_VIEW_DELO);
        Session.getInstance().getUseCaseParams().clear();
        Session.getInstance().getUseCaseParams().put("delo", Controller.getInstance().getAllDela(delo.getNaslov(), delo.getGodina() + "").get(0));
    }

    private Delo napraviDelo(int key) {
        String naslov = txtNaslov.getText().trim();
        String opis = txtOpis.getText().trim();
        int godina = Integer.parseInt(txtGodina.getText().trim());
        String jezik = txtJezik.getText().trim();
        if(naslov.isEmpty() || opis.isEmpty() || txtGodina.getText().trim().isEmpty() || jezik.isEmpty()){
            JOptionPane.showMessageDialog(this, "Sva polja moraju biti popunjena", "Greska!", JOptionPane.ERROR_MESSAGE);
        }else{
            return new Delo(key, naslov, godina, opis, jezik, Session.getInstance().getKorisnik());
        }
        return null;
    }

    private void izmeniDelo(int key) throws Exception {
        Delo delo = napraviDelo(key);
        
        if(delo == null)
            throw new Exception("Nisu bila popunjena sva polja za delo");
        
        TableModelAutor tma = (TableModelAutor) tblIzabraniAutori.getModel();
        List<Autor> autori = tma.getLista();
        
        if (txtOpis.getText().length() > 2000) {
            throw new Exception("Prekoračili ste dozvoljen broj karaktera za opis!");
        }
        
        Controller.getInstance().izmeniDelo(delo,autori);
    }

   

    
}
